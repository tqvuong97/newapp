<h1>Microposts</h1>
<%= link_to 'New Micropost', new_user_micropost_path(current_user.id),class: "btn btn-primary" %>
<div class="card card-body bg-light">
  <% puts @filterrific.inspect %>

  <%= form_for_filterrific @filterrific ,remote: true do |f| %>
      <div class="row">
        <div class="col-md-3">
          <div class="form-group">
            <label class="font-weight-bold">Search
              <%= f.text_field :search_query,:class => 'filterrific-periodically-observed form-control' %>
            </label>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label class="font-weight-bold">Category
              <%= f.select(
                      :with_category_id,
                      @filterrific.select_options[:with_category_id],
                      { include_blank: '- Any -' },
                      {:class => 'form-control'}) %>
            </label>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label class="font-weight-bold">Sorted by
              <%= f.select(:sorted_by, @filterrific.select_options[:sorted_by],{}, {:class => 'form-control'}) %>
            </label>
          </div>
        </div>
<!--        <div>-->
<!--          Registered after-->
          <%#= f.text_field(:with_created_at_gte, class: 'js-datepicker') %>
<!--        </div>-->
        <%= render_filterrific_spinner %>
      </div>
  <% end %>
</div>
<%= render partial: 'microposts/list', locals: { :microposts => @microposts } %>

<script type="text/javascript" charset="utf-8">
    if (typeof Filterrific === 'undefined') {
        var Filterrific = {};
    }


    // Define function to submit Filterrific filter form
    Filterrific.submitFilterForm = function(){
        var form = $(this).parents("form"),
            url = form.attr("action");
        // send before event
        $(form).trigger('loadingFilterrificResults');
        // turn on spinner
        $('.filterrific_spinner').show();
        // Submit ajax request
        $.ajax({
            url: url,
            data: form.serialize(),
            type: 'GET',
            dataType: 'script'
        }).done(function( msg ) {
            // send after event
            $(form).trigger('loadedFilterrificResults');
            $('.filterrific_spinner').hide();
        });
    };



    //
    // Embed jquery.observe_field.js to observe Filterrific filter inputs
    //
    // Copied from https://github.com/splendeo/jquery.observe_field
    // Wrap in immediately invoked function for compatibility with other js libraries
    //
    (function($) {

        $.fn.filterrific_observe_field = function(frequency, callback) {
            frequency = frequency * 1000; // translate to milliseconds
            return this.each(function(){
                var $this = $(this);
                var prev = $this.val();
                var check = function() {
                    if(removed()){ // if removed clear the interval and don't fire the callback
                        if(ti) clearInterval(ti);
                        return;
                    }
                    var val = $this.val();
                    if(prev != val){
                        prev = val;
                        $this.map(callback); // invokes the callback on $this
                    }
                };
                var removed = function() {
                    return $this.closest('html').length == 0
                };
                var reset = function() {
                    if(ti){
                        clearInterval(ti);
                        ti = setInterval(check, frequency);
                    }
                };
                check();
                var ti = setInterval(check, frequency); // invoke check periodically
                // reset counter after user interaction
                $this.bind('keyup click mousemove', reset); //mousemove is for selects
            });
        };
    })(jQuery);


    Filterrific.init = function() {
        // Add change event handler to all Filterrific filter inputs.
        $('#filterrific_filter').on(
            "change",
            ":input",
            Filterrific.submitFilterForm
        );

        // Add periodic observer to selected inputs.
        // Use this for text fields you want to observe for change, e.g., a search input.
        $(".filterrific-periodically-observed").filterrific_observe_field(
            0.5,
            Filterrific.submitFilterForm
        );
    };


    // Initialize event observers on document ready and turbolinks page:load
    jQuery(document).on('turbolinks:load', function() {
        // Prevent double initilisation. With turbolinks 5 this function
        // will be called twice: on 'ready' and 'turbolinks:load'
        jQuery(document).off('ready page:load')
        Filterrific.init();
    });

    jQuery(document).on('ready page:load', function() {
        Filterrific.init();
    });
</script>


